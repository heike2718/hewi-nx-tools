import { createFeature, createReducer, on } from "@ngrx/store";

import {<%= className %>Actions} from './<%= relativeFileName %>.actions';

export const <%= constantName %>_FEATURE_KEY = '<%= propertyName %>';

export interface <%= className %>State {
  loaded: boolean; // has the <%= className %> list been loaded
  dtos: string[] // replace string with the dto-Type
  selectedDto: string | undefined; // replace string with the dto-type
}

const initialState: <%= className %>State = {
    loaded: false,
    dtos: [],
    selectedDto: undefined
}

export const <%= className %>Feature = createFeature({
  name: '<%= className %>Feature',
  reducer: createReducer<<%= className %>State>(
    initialState,
    on(
      <%= className %>Actions.aLL_LOADED,
      (state, { dtos: dtos }): <%= className %>State => {
        return { ...state, dtos, loaded: true }
      }),
    on(
      <%= className %>Actions.dTO_SELECTED,
      (state, action): <%= className %>State => {
        return { ...state, selectedDto: action.dto }
      }),
    on(
      <%= className %>Actions.dTO_UNSELECTED,
      (state, action): <%= className %>State => {
        return { ...state, selectedDto: undefined }
      }),
  )
})